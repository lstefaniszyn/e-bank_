#https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/maven?view=azure-devops
#https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/cache?view=azure-devops
trigger:
- main
variables:
  - name: container_image
    value: maven:3.6.3-openjdk-11
pool:
  vmImage: 'Ubuntu-latest'
stages:
  - stage: 'package'
    displayName: 'Build, test, scan and create docker image with app'
    jobs:
      # - job: 'compile'
      #   container: ${{ variables.container_image }}
      #   displayName: 'Compile and test'
      #   steps:
      #     - task: Maven@3
      #       displayName: 'Compile'
      #       inputs:
      #         mavenPomFile: 'pom.xml'
      #         goals: 'compile test-compile'
      #         publishJUnitResults: false

      #     - task: Maven@3
      #       displayName: 'Test'
      #       inputs:
      #         mavenPomFile: 'pom.xml'
      #         goals: 'test'
      #         publishJUnitResults: true
      #         testResultsFiles: 'target/surefire-reports/*.xml'

      # - job: 'static'
      #   container: ${{ variables.container_image }}
      #   displayName: 'Static analysis and security scan'
      #   dependsOn: 'compile'
      #   steps:
      #   - task: Maven@3
      #     displayName: 'Static analysis'
      #     inputs:
      #       mavenPomFile: 'pom.xml'
      #       options: '-P static-analysis'
      #       goals: 'test'
      #       publishJUnitResults: false
      #   # TODO: tu powinno być zbieranie raportu z jacoco ale go nie ma
      #   # jvm sie crashuje nie sa wygnerowane pliki xml
      #   #https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-code-coverage-results?view=azure-devops#docker
      #   - task: PublishCodeCoverageResults@1
      #     inputs:
      #       codeCoverageTool: JaCoCo
      #       summaryFileLocation: 
      #       additionalCodeCoverageFiles: $(System.DefaultWorkingDirectory)/target/jacoco.exec
      #       reportdDirectory: $(System.DefaultWorkingDirectory)/target/site/jacoco/
      #   - publish: $(System.DefaultWorkingDirectory)/target/site/pmd.html
      #     artifact: 'PMD report'
      # - job: 'integration'
      #   container: ${{ variables.container_image }}
      #   displayName: 'Integration tests'
      #   dependsOn: 'static'
      #   continueOnError: true
      #   steps:
      #   - task: Maven@3
      #     displayName: 'Run integration tests'
      #     inputs:
      #       mavenPomFile: 'pom.xml'
      #       options: '-Dskip.surefire.tests=true'
      #       goals: 'verify'
      #       publishJUnitResults: true
      #       testResultsFiles: 'target/failsafe-reports/*.xml'
      - job: 'package'
        container: ${{ variables.container_image }}
        displayName: 'Packaging software'
        #dependsOn: 'integration'
        steps:
        - task: Maven@3
          displayName: 'Build package'
          inputs:
            mavenPomFile: 'pom.xml'
            options: '-DskipTests=true'
            goals: 'package'
            publishJUnitResults: false
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/target
            artifactName: BuildTarget
        #cannot call a docker from inside a docker
      - job: 'dockerize'
        displayName: 'Dockerize software'
        dependsOn: 'package'
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: BuildTarget
              path: $(System.DefaultWorkingDirectory)/target
          - task: Bash@3
            inputs:
              targetType: inline
              script: ls
              workingDirectory: $(System.DefaultWorkingDirectory)
          - task: Bash@3
            inputs:
              targetType: inline
              script: ls target
              workingDirectory: $(System.DefaultWorkingDirectory)
              #fail bo mamy wiecej niż jeden plik spełniający target/*.jar i kopiowanie nie działa
          - task: Docker@2
            displayName: 'Build docker imgae'
            inputs:
              command: build
              tags: |
                latest
              dockerfile: ./docker/Dockerfile
              repository: ebank